{"version":3,"sources":["TodoFiles/TodoList.js","TodoFiles/AddTodo.js","TodoFiles/Header.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","id","onChange","title","completed","edit","completeTodo","removeTodo","index","editItem","className","type","checked","e","target","value","style","float","onClick","TodoList","items","map","p","key","AddTodo","setItems","useState","setTitle","onSubmit","preventDefault","placeholder","width","height","event","Header","App","defaultItems","newItem","splice","oldItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3e3b9680.chunk.js","sourcesContent":["import React from \"react\";\r\nimport '../App.css'\r\n\r\nconst TodoItem = ({ id, onChange,title, completed, edit,completeTodo,removeTodo,index, editItem }) => {\r\n \r\n \r\n  return (\r\n    <div className=\"todo\">\r\n      <input type=\"checkbox\" checked={completed} />\r\n      {edit ?  <input type=\"text\" \r\nonChange={e=>onChange(id,e.target.value)} \r\nvalue={title} /> : title}\r\n      <button className=\"todo-form-button\" style={{ float: \"right\" }} onClick={() => completeTodo(index,id)}>\r\n        Complete\r\n      </button>\r\n      <button className=\"todo-form-button\" style={{ float: \"right\" }} onClick={() => removeTodo(index)}>\r\n        Remove\r\n      </button>\r\n            \r\n      <button className=\"todo-form-button\"\r\n        style={{ float: \"right\" }}\r\n        value={id}\r\n        onClick={() => editItem({ id, title })}\r\n      >\r\n        Edit\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nconst TodoList = ({ items = [],completeTodo,removeTodo, editItem,onChange }) => {\r\n\r\n  return items.map((p,index) => \r\n  <TodoItem {...p} \r\n  key={p.id}\r\n  index={index}\r\n  completeTodo={completeTodo}\r\n  removeTodo={removeTodo} \r\n  onChange={onChange} \r\n  editItem={editItem} />);\r\n};\r\n\r\nexport default TodoList;\r\n","import React,{useState} from 'react'\r\nimport '../App.css'\r\nconst AddTodo=({items,setItems})=>{\r\n    const[title,setTitle]=useState('')\r\n    const handleTitle=(event)=>{\r\n        setTitle(event.target.value)\r\n    }\r\n    const handleAddTodo=()=>{\r\n        const NewItem={title}\r\n        setItems([NewItem,...items])\r\n    }\r\n    return(\r\n        <form className=\"todo-form-input\" onSubmit={e=>{e.preventDefault();handleAddTodo()}}>\r\n            <input type=\"text\" placeholder=\"enter new task...\" style={{width:350,height:15}} \r\n            value={title} onChange={handleTitle}/>\r\n            <input className=\"todo-form-button\" type=\"submit\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTodo","import React from 'react'\r\nimport '../App.css'\r\n\r\nconst Header=()=>{\r\n    return(\r\n        <div className=\"App-header\">\r\n        <h1>Todo</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { useState } from \"react\";\nimport TodoList from \"./TodoFiles/TodoList\";\nimport AddTodo from \"./TodoFiles/AddTodo\";\nimport Header from \"./TodoFiles/Header\";\nimport './App.css';\n\nexport default function App({defaultItems=[]}) {\n  const [items, setItems] = useState(defaultItems);\n\n  const completeTodo = index => {\n    const newItem = [...items];\n    newItem[index].completed = true;\n    setItems(newItem);\n  };\n  const removeTodo = index => {\n      const newItem = [...items];\n      newItem.splice(index, 1);\n      setItems(newItem);\n  };  \n\n  const onChange = (id, value) => {\n    setItems(oldItems =>\n      oldItems.map(p => (p.id === id ? { ...p, title: value } : p))\n    );\n  };\n\n  const editItem = ({ id }) => {\n    setItems(oldItems =>\n      oldItems.map(p => (p.id === id ? { ...p, edit: !p.edit } : p))\n    );\n  };\n  return (\n    <div className=\"App\">\n      <Header/>\n      <hr/>\n      <AddTodo items={items} setItems={setItems} />\n      <br />\n      <hr />\n      <TodoList \n      items={items}\n      completeTodo={completeTodo}\n      removeTodo={removeTodo} \n      onChange={onChange} \n      editItem={editItem} />\n      \n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}